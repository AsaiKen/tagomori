00000: PUSH1 0x80
00002: PUSH1 0x40
00004: MSTORE
00005: PUSH1 0x04
00007: CALLDATASIZE
00008: LT
00009: PUSH2 0x0082
0000c: JUMPI
0000d: PUSH4 0xffffffff
00012: PUSH29 0x0100000000000000000000000000000000000000000000000000000000
00030: PUSH1 0x00
00032: CALLDATALOAD // 関数シグネチャ
00033: DIV
00034: AND
00035: PUSH4 0x095ea7b3
0003a: DUP2
0003b: EQ
0003c: PUSH2 0x0084
0003f: JUMPI
00040: DUP1
00041: PUSH4 0x18160ddd // totalSupply
00046: EQ
00047: PUSH2 0x009b
0004a: JUMPI
0004b: DUP1
0004c: PUSH4 0x23b872dd // transferFrom
00051: EQ
00052: PUSH2 0x00c2
00055: JUMPI
00056: DUP1
00057: PUSH4 0x70a08231 // balanceOf
0005c: EQ
0005d: PUSH2 0x00df
00060: JUMPI
00061: DUP1
00062: PUSH4 0x83f12fec // batchTransfer(address[],uint256)
00067: EQ
00068: PUSH2 0x00f3
0006b: JUMPI
0006c: DUP1
0006d: PUSH4 0xa9059cbb // transfer
00072: EQ
00073: PUSH2 0x0084
00076: JUMPI
00077: DUP1
00078: PUSH4 0xdd62ed3e // allowance
0007d: EQ
0007e: PUSH2 0x013d
00081: JUMPI

00082: JUMPDEST
00083: STOP

00084: JUMPDEST // transfer
00085: PUSH2 0x0082
00088: PUSH1 0x01
0008a: PUSH1 0xa0
0008c: PUSH1 0x02
0008e: EXP
0008f: SUB
00090: PUSH1 0x04
00092: CALLDATALOAD
00093: AND
00094: PUSH1 0x24
00096: CALLDATALOAD
00097: PUSH2 0x0153
0009a: JUMP

0009b: JUMPDEST
0009c: CALLVALUE
0009d: DUP1
0009e: ISZERO
0009f: PUSH2 0x00a7
000a2: JUMPI

000a3: PUSH1 0x00
000a5: DUP1
000a6: REVERT

000a7: JUMPDEST
000a8: POP
000a9: PUSH2 0x00b0
000ac: PUSH2 0x0157
000af: JUMP

000b0: JUMPDEST
000b1: PUSH1 0x40
000b3: DUP1
000b4: MLOAD
000b5: SWAP2
000b6: DUP3
000b7: MSTORE
000b8: MLOAD
000b9: SWAP1
000ba: DUP2
000bb: SWAP1
000bc: SUB
000bd: PUSH1 0x20
000bf: ADD
000c0: SWAP1
000c1: RETURN

000c2: JUMPDEST // transferFrom
000c3: PUSH2 0x0082
000c6: PUSH1 0x01
000c8: PUSH1 0xa0
000ca: PUSH1 0x02
000cc: EXP
000cd: SUB
000ce: PUSH1 0x04
000d0: CALLDATALOAD
000d1: DUP2
000d2: AND
000d3: SWAP1
000d4: PUSH1 0x24
000d6: CALLDATALOAD
000d7: AND
000d8: PUSH1 0x44
000da: CALLDATALOAD
000db: PUSH2 0x015d
000de: JUMP

000df: JUMPDEST
000e0: PUSH2 0x00b0
000e3: PUSH1 0x01
000e5: PUSH1 0xa0
000e7: PUSH1 0x02
000e9: EXP
000ea: SUB
000eb: PUSH1 0x04
000ed: CALLDATALOAD
000ee: AND
000ef: PUSH2 0x0162
000f2: JUMP

000f3: JUMPDEST // batchTransfer(address[],uint256)
000f4: PUSH1 0x40
000f6: DUP1
000f7: MLOAD
000f8: PUSH1 0x20
000fa: PUSH1 0x04
000fc: DUP1
000fd: CALLDATALOAD // address[]の開始オフセット
000fe: DUP1
000ff: DUP3
00100: ADD
00101: CALLDATALOAD // address[]の配列長
00102: DUP4
00103: DUP2
00104: MUL // address[]のメモリ長さ
00105: DUP1
00106: DUP7
00107: ADD
00108: DUP6
00109: ADD
0010a: SWAP1
0010b: SWAP7
0010c: MSTORE
0010d: DUP1
0010e: DUP6
0010f: MSTORE
00110: PUSH2 0x0082
00113: SWAP6
00114: CALLDATASIZE
00115: SWAP6
00116: SWAP4
00117: SWAP5
00118: PUSH1 0x24
0011a: SWAP5
0011b: SWAP4
0011c: DUP6
0011d: ADD
0011e: SWAP3
0011f: SWAP2
00120: DUP3
00121: SWAP2
00122: DUP6
00123: ADD
00124: SWAP1
00125: DUP5
00126: SWAP1
00127: DUP1
00128: DUP3
00129: DUP5
0012a: CALLDATACOPY // 第1引数address[]
0012b: POP
0012c: SWAP5
0012d: SWAP8
0012e: POP
0012f: POP
00130: SWAP4
00131: CALLDATALOAD // 第2引数uint256
00132: SWAP5
00133: POP
00134: PUSH2 0x017d
00137: SWAP4
00138: POP
00139: POP
0013a: POP
0013b: POP
0013c: JUMP // -> 0x017d

0013d: JUMPDEST // allowance
0013e: PUSH2 0x0082
00141: PUSH1 0x01
00143: PUSH1 0xa0
00145: PUSH1 0x02
00147: EXP
00148: SUB
00149: PUSH1 0x04
0014b: CALLDATALOAD
0014c: DUP2
0014d: AND
0014e: SWAP1
0014f: PUSH1 0x24
00151: CALLDATALOAD
00152: AND

00153: JUMPDEST // transfer
00154: POP
00155: POP
00156: JUMP

00157: JUMPDEST // transfer
00158: PUSH1 0x00
0015a: SLOAD
0015b: DUP2
0015c: JUMP

0015d: JUMPDEST // transferFrom
0015e: POP
0015f: POP
00160: POP
00161: JUMP

00162: JUMPDEST // transferFrom
00163: PUSH1 0x01
00165: PUSH1 0xa0
00167: PUSH1 0x02
00169: EXP
0016a: SUB
0016b: AND
0016c: PUSH1 0x00
0016e: SWAP1
0016f: DUP2
00170: MSTORE
00171: PUSH1 0x01
00173: PUSH1 0x20
00175: MSTORE
00176: PUSH1 0x40
00178: SWAP1
00179: SHA3
0017a: SLOAD
0017b: SWAP1
0017c: JUMP

0017d: JUMPDEST // batchTransfer
0017e: DUP2
0017f: MLOAD //  uint cnt = _receivers.length;
00180: DUP2
00181: DUP2
00182: MUL
00183: PUSH1 0x00 // require(cnt > 0 && cnt <= 20);
00185: DUP1
00186: DUP4
00187: GT
00188: DUP1
00189: ISZERO
0018a: PUSH2 0x0194
0018d: JUMPI

0018e: POP
0018f: PUSH1 0x14
00191: DUP4
00192: GT
00193: ISZERO
00194: JUMPDEST
00195: ISZERO
00196: ISZERO
00197: PUSH2 0x019f
0019a: JUMPI

0019b: PUSH1 0x00
0019d: DUP1
0019e: REVERT

0019f: JUMPDEST
001a0: PUSH1 0x00
001a2: DUP5
001a3: GT
001a4: DUP1
001a5: ISZERO
001a6: PUSH2 0x01be
001a9: JUMPI

001aa: POP // require(_value > 0 && balances[msg.sender] >= amount);
001ab: CALLER
001ac: PUSH1 0x00
001ae: SWAP1
001af: DUP2
001b0: MSTORE
001b1: PUSH1 0x01
001b3: PUSH1 0x20
001b5: MSTORE
001b6: PUSH1 0x40
001b8: SWAP1
001b9: SHA3
001ba: SLOAD
001bb: DUP3
001bc: GT
001bd: ISZERO

001be: JUMPDEST
001bf: ISZERO
001c0: ISZERO
001c1: PUSH2 0x01c9
001c4: JUMPI

001c5: PUSH1 0x00
001c7: DUP1
001c8: REVERT

001c9: JUMPDEST //  balances[msg.sender] = balances[msg.sender] - amount;
001ca: POP
001cb: CALLER
001cc: PUSH1 0x00
001ce: SWAP1
001cf: DUP2
001d0: MSTORE
001d1: PUSH1 0x01
001d3: PUSH1 0x20
001d5: MSTORE
001d6: PUSH1 0x40
001d8: DUP2
001d9: SHA3
001da: DUP1
001db: SLOAD
001dc: DUP4
001dd: SWAP1
001de: SUB
001df: SWAP1
001e0: SSTORE
001e1: JUMPDEST
001e2: DUP3
001e3: DUP2
001e4: LT
001e5: ISZERO
001e6: PUSH2 0x02e3
001e9: JUMPI

001ea: DUP4 // require(balances[_receivers[i]] < balances[_receivers[i]] + _value);
001eb: PUSH1 0x01
001ed: PUSH1 0x00
001ef: DUP8
001f0: DUP5
001f1: DUP2
001f2: MLOAD
001f3: DUP2
001f4: LT
001f5: ISZERO
001f6: ISZERO
001f7: PUSH2 0x01fc
001fa: JUMPI

001fb: Missing opcode 0xfe

001fc: JUMPDEST
001fd: SWAP1
001fe: PUSH1 0x20
00200: ADD
00201: SWAP1
00202: PUSH1 0x20
00204: MUL
00205: ADD
00206: MLOAD
00207: PUSH1 0x01
00209: PUSH1 0xa0
0020b: PUSH1 0x02
0020d: EXP
0020e: SUB
0020f: AND
00210: PUSH1 0x01
00212: PUSH1 0xa0
00214: PUSH1 0x02
00216: EXP
00217: SUB
00218: AND
00219: DUP2
0021a: MSTORE
0021b: PUSH1 0x20
0021d: ADD
0021e: SWAP1
0021f: DUP2
00220: MSTORE
00221: PUSH1 0x20
00223: ADD
00224: PUSH1 0x00
00226: SHA3
00227: SLOAD
00228: ADD
00229: PUSH1 0x01
0022b: PUSH1 0x00
0022d: DUP8
0022e: DUP5
0022f: DUP2
00230: MLOAD
00231: DUP2
00232: LT
00233: ISZERO
00234: ISZERO
00235: PUSH2 0x023a
00238: JUMPI

00239: Missing opcode 0xfe

0023a: JUMPDEST
0023b: PUSH1 0x20
0023d: SWAP1
0023e: DUP2
0023f: MUL
00240: SWAP1
00241: SWAP2
00242: ADD
00243: DUP2
00244: ADD
00245: MLOAD
00246: PUSH1 0x01
00248: PUSH1 0xa0
0024a: PUSH1 0x02
0024c: EXP
0024d: SUB
0024e: AND
0024f: DUP3
00250: MSTORE
00251: DUP2
00252: ADD
00253: SWAP2
00254: SWAP1
00255: SWAP2
00256: MSTORE
00257: PUSH1 0x40
00259: ADD
0025a: PUSH1 0x00
0025c: SHA3
0025d: SLOAD
0025e: LT
0025f: PUSH2 0x0267
00262: JUMPI

00263: PUSH1 0x00
00265: DUP1
00266: REVERT

00267: JUMPDEST // balances[_receivers[i]] = balances[_receivers[i]] + _value;
00268: DUP4
00269: PUSH1 0x01
0026b: PUSH1 0x00
0026d: DUP8
0026e: DUP5
0026f: DUP2
00270: MLOAD
00271: DUP2
00272: LT
00273: ISZERO
00274: ISZERO
00275: PUSH2 0x027a
00278: JUMPI

00279: Missing opcode 0xfe

0027a: JUMPDEST
0027b: SWAP1
0027c: PUSH1 0x20
0027e: ADD
0027f: SWAP1
00280: PUSH1 0x20
00282: MUL
00283: ADD
00284: MLOAD
00285: PUSH1 0x01
00287: PUSH1 0xa0
00289: PUSH1 0x02
0028b: EXP
0028c: SUB
0028d: AND
0028e: PUSH1 0x01
00290: PUSH1 0xa0
00292: PUSH1 0x02
00294: EXP
00295: SUB
00296: AND
00297: DUP2
00298: MSTORE
00299: PUSH1 0x20
0029b: ADD
0029c: SWAP1
0029d: DUP2
0029e: MSTORE
0029f: PUSH1 0x20
002a1: ADD
002a2: PUSH1 0x00
002a4: SHA3
002a5: SLOAD
002a6: ADD
002a7: PUSH1 0x01
002a9: PUSH1 0x00
002ab: DUP8
002ac: DUP5
002ad: DUP2
002ae: MLOAD
002af: DUP2
002b0: LT
002b1: ISZERO
002b2: ISZERO
002b3: PUSH2 0x02b8
002b6: JUMPI

002b7: Missing opcode 0xfe

002b8: JUMPDEST
002b9: PUSH1 0x20
002bb: SWAP1
002bc: DUP2
002bd: MUL
002be: SWAP1
002bf: SWAP2
002c0: ADD
002c1: DUP2
002c2: ADD
002c3: MLOAD
002c4: PUSH1 0x01
002c6: PUSH1 0xa0
002c8: PUSH1 0x02
002ca: EXP
002cb: SUB
002cc: AND
002cd: DUP3
002ce: MSTORE
002cf: DUP2
002d0: ADD
002d1: SWAP2
002d2: SWAP1
002d3: SWAP2
002d4: MSTORE
002d5: PUSH1 0x40
002d7: ADD
002d8: PUSH1 0x00
002da: SHA3
002db: SSTORE
002dc: PUSH1 0x01
002de: ADD
002df: PUSH2 0x01e1
002e2: JUMP

002e3: JUMPDEST
002e4: POP
002e5: POP
002e6: POP
002e7: POP
002e8: POP
002e9: JUMP
002ea: STOP
